From: Ivan Kardykov <kardykov@tabit.pro>
Subject: [PATCH] libxl: add support for xengt video device

Add ability to configure xengt video device with options.

Signed-off-by: Ivan Kardykov <kardykov@tabit.pro>
---
diff --git a/docs/schemas/domaincommon.rng b/docs/schemas/domaincommon.rng
index 011ce9f..1fbee11 100644
--- a/docs/schemas/domaincommon.rng
+++ b/docs/schemas/domaincommon.rng
@@ -3976,6 +3976,26 @@
                 </attribute>
               </optional>
             </group>
+            <group>
+              <attribute name="type">
+                <value>xengt</value>
+              </attribute>
+              <optional>
+                <attribute name="low_gm_sz">
+                  <ref name="unsignedInt"/>
+                </attribute>
+              </optional>
+              <optional>
+                <attribute name="high_gm_sz">
+                  <ref name="unsignedInt"/>
+                </attribute>
+              </optional>
+              <optional>
+                <attribute name="fence_sz">
+                  <ref name="unsignedInt"/>
+                </attribute>
+              </optional>
+            </group>
           </choice>
           <optional>
             <attribute name="vram">
diff --git a/src/conf/domain_conf.c b/src/conf/domain_conf.c
index 8b818b7..7b08a38 100644
--- a/src/conf/domain_conf.c
+++ b/src/conf/domain_conf.c
@@ -785,6 +785,7 @@ VIR_ENUM_IMPL(virDomainVideo,
               "cirrus",
               "vmvga",
               "xen",
+              "xengt",
               "vbox",
               "qxl",
               "parallels",
@@ -15845,6 +15846,7 @@ virDomainVideoDefaultRAM(const virDomainDef *def,
     switch (type) {
     case VIR_DOMAIN_VIDEO_TYPE_VGA:
     case VIR_DOMAIN_VIDEO_TYPE_CIRRUS:
+    case VIR_DOMAIN_VIDEO_TYPE_XENGT:
     case VIR_DOMAIN_VIDEO_TYPE_VMVGA:
         if (def->virtType == VIR_DOMAIN_VIRT_VBOX)
             return 8 * 1024;
@@ -16009,6 +16011,9 @@ virDomainVideoDefParseXML(virDomainXMLOptionPtr xmlopt,
     g_autofree char *ram = NULL;
     g_autofree char *vgamem = NULL;
     g_autofree char *primary = NULL;
+    g_autofree char *low_gm_sz = NULL;
+    g_autofree char *high_gm_sz = NULL;
+    g_autofree char *fence_sz = NULL;
 
     if (!(def = virDomainVideoDefNew(xmlopt)))
         return NULL;
@@ -16027,6 +16032,9 @@ virDomainVideoDefParseXML(virDomainXMLOptionPtr xmlopt,
                 vram64 = virXMLPropString(cur, "vram64");
                 vgamem = virXMLPropString(cur, "vgamem");
                 heads = virXMLPropString(cur, "heads");
+                low_gm_sz = virXMLPropString(cur, "low_gm_sz");
+                high_gm_sz = virXMLPropString(cur, "high_gm_sz");
+                fence_sz = virXMLPropString(cur, "fence_sz");
 
                 if ((primary = virXMLPropString(cur, "primary")) != NULL) {
                     ignore_value(virStringParseYesNo(primary, &def->primary));
@@ -16136,6 +16144,30 @@ virDomainVideoDefParseXML(virDomainXMLOptionPtr xmlopt,
         }
     }
 
+    if (low_gm_sz) {
+        if (virStrToLong_uip(low_gm_sz, NULL, 10, &def->low_gm_sz) < 0) {
+	    virReportError(VIR_ERR_INTERNAL_ERROR,
+                           _("cannot parse video low_gm_sz, '%s'"), low_gm_sz);
+            goto error;
+        }
+    }
+
+    if (high_gm_sz) {
+        if (virStrToLong_uip(high_gm_sz, NULL, 10, &def->high_gm_sz) < 0) {
+	    virReportError(VIR_ERR_INTERNAL_ERROR,
+                           _("cannot parse video high_gm_sz, '%s'"), high_gm_sz);
+            goto error;
+        }
+    }
+
+    if (fence_sz) {
+        if (virStrToLong_uip(fence_sz, NULL, 10, &def->fence_sz) < 0) {
+	    virReportError(VIR_ERR_INTERNAL_ERROR,
+                           _("cannot parse video fence_sz, '%s'"), fence_sz);
+            goto error;
+        }
+    }
+
     if (virDomainDeviceInfoParseXML(xmlopt, node, &def->info, flags) < 0)
         goto error;
 
diff --git a/src/conf/domain_conf.h b/src/conf/domain_conf.h
index 959f0d4..ab52f19 100644
--- a/src/conf/domain_conf.h
+++ b/src/conf/domain_conf.h
@@ -1448,6 +1448,7 @@ typedef enum {
     VIR_DOMAIN_VIDEO_TYPE_CIRRUS,
     VIR_DOMAIN_VIDEO_TYPE_VMVGA,
     VIR_DOMAIN_VIDEO_TYPE_XEN,
+    VIR_DOMAIN_VIDEO_TYPE_XENGT,
     VIR_DOMAIN_VIDEO_TYPE_VBOX,
     VIR_DOMAIN_VIDEO_TYPE_QXL,
     VIR_DOMAIN_VIDEO_TYPE_PARALLELS, /* pseudo device for VNC in containers */
@@ -1496,6 +1497,9 @@ struct _virDomainVideoDef {
     unsigned int vram64; /* kibibytes (multiples of 1024) */
     unsigned int vgamem; /* kibibytes (multiples of 1024) */
     unsigned int heads;
+    unsigned int low_gm_sz;
+    unsigned int high_gm_sz;
+    unsigned int fence_sz;
     bool primary;
     virDomainVideoAccelDefPtr accel;
     virDomainVideoResolutionDefPtr res;
diff --git a/src/libxl/libxl_conf.c b/src/libxl/libxl_conf.c
index 68df467..7cd4f14 100644
--- a/src/libxl/libxl_conf.c
+++ b/src/libxl/libxl_conf.c
@@ -2434,6 +2434,15 @@ libxlMakeVideo(virDomainDefPtr def, libxl_domain_config *d_config)
             }
             break;
 #endif
+        case VIR_DOMAIN_VIDEO_TYPE_XENGT:
+           b_info->u.hvm.vga.kind = LIBXL_VGA_INTERFACE_TYPE_XENGT;
+            if (def->videos[0]->low_gm_sz)
+               b_info->u.hvm.vgt_low_gm_sz = def->videos[0]->low_gm_sz;
+            if (def->videos[0]->high_gm_sz)
+               b_info->u.hvm.vgt_high_gm_sz = def->videos[0]->high_gm_sz;
+            if (def->videos[0]->fence_sz)
+               b_info->u.hvm.vgt_fence_sz = def->videos[0]->fence_sz;
+            break;
 
         default:
             virReportError(VIR_ERR_CONFIG_UNSUPPORTED,
diff --git a/src/libxl/libxl_domain.c b/src/libxl/libxl_domain.c
index cc53a76..6410f2a 100644
--- a/src/libxl/libxl_domain.c
+++ b/src/libxl/libxl_domain.c
@@ -339,6 +339,7 @@ libxlDomainDeviceDefPostParse(virDomainDeviceDefPtr dev,
                             dev->data.video->vram = 8 * 1024;
                     }
                     break;
+                case VIR_DOMAIN_VIDEO_TYPE_XENGT:
                 case VIR_DOMAIN_VIDEO_TYPE_CIRRUS:
                     if (dev->data.video->vram == 0) {
                         if (dm_type == LIBXL_DEVICE_MODEL_VERSION_QEMU_XEN)
